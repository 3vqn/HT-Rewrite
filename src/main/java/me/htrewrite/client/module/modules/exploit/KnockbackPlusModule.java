package me.htrewrite.client.module.modules.exploit;

import me.htrewrite.client.event.custom.CustomEvent;
import me.htrewrite.client.event.custom.networkmanager.NetworkPacketEvent;
import me.htrewrite.client.module.Module;
import me.htrewrite.client.module.ModuleType;
import me.htrewrite.exeterimports.mcapi.settings.ToggleableSetting;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.init.Enchantments;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketAnimation;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.util.EnumHand;

import java.util.Map;

public class KnockbackPlusModule extends Module {
    public static final ToggleableSetting onlySword = new ToggleableSetting("OnlySword", null, false);

    public KnockbackPlusModule() {
        super("Knockback+", "Applies knockback 2 when you attack someone with an item.", ModuleType.Exploits, 0);
        addOption(onlySword);
        endOption();
    }

    private boolean containsEnchantment(ItemStack itemStack, Enchantment enchantment) {
        Map<Enchantment, Integer> enchantments = EnchantmentHelper.getEnchantments(itemStack);
        if(enchantments.size() == 0)
            return false;
        for(Enchantment entryEnchantment : enchantments.keySet())
            if(entryEnchantment.getName().contentEquals(enchantment.getName()))
                return true;
        return false;
    }

    @EventHandler
    private Listener<NetworkPacketEvent> packetEventListener = new Listener<>(event -> {
        if(!(!event.reading && event.getEra()== CustomEvent.Era.PRE))
            return;
        if(event.getPacket() instanceof CPacketUseEntity) {
            CPacketUseEntity packet = (CPacketUseEntity)event.getPacket();
            if(packet.hand == EnumHand.MAIN_HAND && packet.action == CPacketUseEntity.Action.ATTACK) {
                final ItemStack itemStack = mc.player.getHeldItemMainhand();
                if(!containsEnchantment(itemStack, Enchantments.KNOCKBACK)) {
                    Map<Enchantment, Integer> enchantments = EnchantmentHelper.getEnchantments(itemStack);
                    enchantments.put(Enchantments.KNOCKBACK, 2);

                    EnchantmentHelper.setEnchantments(enchantments, itemStack);
                }
            }
        }
    });
}