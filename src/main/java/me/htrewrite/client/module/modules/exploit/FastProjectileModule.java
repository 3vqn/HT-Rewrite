package me.htrewrite.client.module.modules.exploit;


import me.htrewrite.client.event.custom.CustomEvent;
import me.htrewrite.client.event.custom.networkmanager.NetworkPacketEvent;
import me.htrewrite.client.module.Module;
import me.htrewrite.client.module.ModuleType;
import me.htrewrite.client.util.ChatColor;
import me.htrewrite.exeterimports.mcapi.settings.IntegerSetting;
import me.htrewrite.exeterimports.mcapi.settings.ToggleableSetting;
import me.htrewrite.exeterimports.mcapi.settings.ValueSetting;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.item.*;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.util.EnumHand;
import net.minecraft.util.text.TextComponentString;

public class FastProjectileModule extends Module {
    private long lastShootTime;

    public static final IntegerSetting speed = new IntegerSetting("Speed", null, 100d, 0d, 250d);
    public static final IntegerSetting timeOut = new IntegerSetting("Time", null, 3500d, 0d, 10000d);
    public static final ToggleableSetting arrows = new ToggleableSetting("Arrows", null, true);
    public static final ToggleableSetting pearls = new ToggleableSetting("Ender Pearls", null, false);
    public static final ToggleableSetting bypass = new ToggleableSetting("Bypass", null, false);

    public FastProjectileModule() {
        super("FastProjectile", "Shoots a projectile at a selected speed.", ModuleType.Exploits, 0);
        addOption(speed);
        addOption(timeOut);
        addOption(arrows);
        addOption(pearls);
        addOption(bypass);
        endOption();
    }

    @Override
    public void onEnable() {
        lastShootTime = System.currentTimeMillis();
        super.onEnable();
    }

    @EventHandler
    private Listener<NetworkPacketEvent> packetEventListener = new Listener<>(event -> {
        if (event.reading || event.getEra() == CustomEvent.Era.POST)
            return;
        if (event.getPacket() instanceof CPacketPlayerDigging) {
            CPacketPlayerDigging packet = (CPacketPlayerDigging) event.getPacket();
            if (packet.getAction() == CPacketPlayerDigging.Action.RELEASE_USE_ITEM)
                if ((mc.player.getHeldItemMainhand().getItem() instanceof ItemBow) && arrows.isEnabled())
                    setVelocity();
        } else if (event.getPacket() instanceof CPacketPlayerTryUseItem) {
            CPacketPlayerTryUseItem packet = (CPacketPlayerTryUseItem) event.getPacket();
            if (packet.getHand() == EnumHand.MAIN_HAND)
                    if (mc.player.getHeldItemMainhand().getItem() instanceof ItemEnderPearl && pearls.isEnabled())
                        setVelocity();
        }
    });

    private void setVelocity() {
        if (System.currentTimeMillis() - lastShootTime >= timeOut.getValue()) {
            lastShootTime = System.currentTimeMillis();
            mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING));
            for (int i = 0; i < speed.getValue().intValue(); ++i)
                if (bypass.isEnabled()) {
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1e-10, mc.player.posZ, false));
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1e-10, mc.player.posZ, true));
                } else {
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1e-10, mc.player.posZ, true));
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1e-10, mc.player.posZ, false));
                }
        }
    }
}